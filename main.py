import os
import json
import asyncio
import firebase_admin
from firebase_admin import credentials, firestore
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.filters.callback_data import CallbackData
from aiogram.client.default import DefaultBotProperties
from threading import Thread

# üî• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ Secrets
TOKEN = os.getenv("BOT_TOKEN")  # –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω –∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤ Replit
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º—ñ–Ω–∞ —Ç–∞–∫–æ–∂ –±–µ—Ä–µ–º–æ –∑ Secrets

# üî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–∏ (–∑–∞–º—ñ—Å—Ç—å JSON-—Ñ–∞–π–ª—É)
firebase_credentials_json = os.getenv("FIREBASE_CREDENTIALS_JSON")
cred_dict = json.loads(
    firebase_credentials_json)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON —É —Å–ª–æ–≤–Ω–∏–∫
cred = credentials.Certificate(cred_dict)  # –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —É Firebase SDK

firebase_admin.initialize_app(cred)
db = firestore.client()

# üî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram-–±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# üìå **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**
main_menu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìã –ú–µ–Ω—é")]],
                                resize_keyboard=True)


# üìå **CallbackData –¥–ª—è –∫–Ω–æ–ø–æ–∫**
class SiteCallback(CallbackData, prefix="site"):
    site: str


class RequestTypeCallback(CallbackData, prefix="request_type"):
    site: str
    request_type: str  # phone | chat


class RequestStatusCallback(CallbackData, prefix="request_status"):
    site: str
    request_type: str  # phone | chat
    status: str  # new | done


class RequestActionCallback(CallbackData, prefix="act"):
    rid: str
    s: str
    t: str
    a: str


# üìå **–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∞–π—Ç—ñ–≤**
def get_sites():
    requests_ref = db.collection("requests")
    docs = requests_ref.stream()
    return list({doc.to_dict().get("site", "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∞–π—Ç") for doc in docs})


# üìå **–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–∞–π—Ç—É**
def get_requests_by_site(site, request_type, status):
    requests_ref = db.collection("requests")
    query = requests_ref.where("site", "==", site)

    if status:
        query = query.where("status", "==", status)

    requests = []
    for doc in query.stream():
        data = doc.to_dict()
        data['id'] = doc.id

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∑–∞—è–≤–∫–∏ –≤ Python
        if request_type == "phone":
            # –î–ª—è –∑–≤–æ–Ω–∫–æ–≤: –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ social —Ä–∞–≤–µ–Ω "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
            if data.get("phone") and data.get("social") == "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ":
                requests.append(data)
        elif request_type == "chat":
            # –î–ª—è —á–∞—Ç–æ–≤: –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ social –Ω–µ —Ä–∞–≤–µ–Ω "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
            if data.get("phone") and data.get("social") != "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ":
                requests.append(data)

    return requests


# üìå **–ö–æ–º–∞–Ω–¥–∞ /start**
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üîπ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞–º–∏.\n\n‚Ñπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üìã –ú–µ–Ω—é, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏.",
        reply_markup=main_menu)


# üìå **–ú–µ–Ω—é (—Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç—ñ–≤)**
@router.message(F.text.casefold() == "üìã –º–µ–Ω—é")
async def menu(message: Message):
    sites = get_sites()
    if not sites:
        await message.answer("‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Å–∞–π—Ç —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∑–∞—è–≤–∫–∏.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text=site,
                                 callback_data=SiteCallback(site=site).pack())
        ] for site in sites] +
        [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu")]])
    await message.answer("üìå –û–±–µ—Ä—ñ—Ç—å —Å–∞–π—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏:",
                         reply_markup=markup)


# üìå **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–æ–∫**
@router.callback_query(RequestTypeCallback.filter())
async def show_request_type_options(callback: CallbackQuery,
                                    callback_data: RequestTypeCallback):
    site = callback_data.site
    request_type = callback_data.request_type

    markup = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(
                text="üü° –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏",
                callback_data=RequestStatusCallback(
                    site=site, request_type=request_type, status="new").pack())
        ],
                         [
                             InlineKeyboardButton(
                                 text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏",
                                 callback_data=RequestStatusCallback(
                                     site=site,
                                     request_type=request_type,
                                     status="done").pack())
                         ],
                         [
                             InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥",
                                                  callback_data=SiteCallback(
                                                      site=site).pack())
                         ]])

    type_text = "üìû –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫" if request_type == "phone" else "üí¨ –ó–∞—è–≤–∫–∏ –∏–∑ —á–∞—Ç–∞"
    await callback.message.edit_text(f"üìå <b>{site}</b>\n{type_text}:",
                                     reply_markup=markup)


# üìå **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é**
@router.callback_query(F.data == "menu")
async def back_to_menu(callback: CallbackQuery):
    sites = get_sites()
    if not sites:
        await callback.message.edit_text("‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Å–∞–π—Ç —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∑–∞—è–≤–∫–∏."
                                         )
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=site,
                             callback_data=SiteCallback(site=site).pack())
    ] for site in sites])
    await callback.message.edit_text("üìå –û–±–µ—Ä—ñ—Ç—å —Å–∞–π—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏:",
                                     reply_markup=markup)


# üìå **–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫**
@router.callback_query(RequestStatusCallback.filter())
async def show_requests(callback: CallbackQuery,
                        callback_data: RequestStatusCallback):
    site = callback_data.site
    request_type = callback_data.request_type
    status = callback_data.status

    requests = get_requests_by_site(site, request_type, status)

    if not requests:
        markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="‚¨Ö –ù–∞–∑–∞–¥",
                callback_data=RequestTypeCallback(
                    site=site, request_type=request_type).pack())
        ]])
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ù–∞ —Å–∞–π—Ç—ñ {site} –Ω–µ–º–∞—î {'–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö' if status == 'done' else '–Ω–æ–≤–∏—Ö'} –∑–∞—è–≤–æ–∫.",
            reply_markup=markup)
        return

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∫–µ –∑–∞—è–≤–æ–∫
    await callback.message.edit_text(f"üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–∞–π—Ç—É {site}:")

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for req in requests:
        await send_request_card(callback.message, req, site, request_type)

    # –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥",
                             callback_data=RequestTypeCallback(
                                 site=site, request_type=request_type).pack())
    ]])
    await callback.message.answer("üìå –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)


# üìå **–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –∫–∞—Ä—Ç–æ—á–∫–∏**
async def send_request_card(message, req, site, request_type):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏
    text = f"üìå <b>–ó–∞—è–≤–∫–∞</b>\nüåç <b>–°–∞–π—Ç:</b> {req['site']}\n"

    if request_type == "phone":
        text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
    else:  # chat
        text += (
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üîó <b>{req.get('social', '–°–æ—Ü–º–µ—Ä–µ–∂–∞')}:</b> {req.get('nickname', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        )

    text += f"üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ' if req.get('status') == 'done' else 'üü° –ù–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'}"

    buttons = []
    if req.get('status') != 'done':
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ",
                                 callback_data=RequestActionCallback(
                                     rid=req['id'],
                                     s=site,
                                     t=request_type,
                                     a="done").pack())
        ])

    buttons.append([
        InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏",
                             callback_data=RequestActionCallback(
                                 rid=req['id'],
                                 s=site,
                                 t=request_type,
                                 a="del").pack())
    ])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(message.chat.id, text, reply_markup=markup)


# üìå **–û–±—Ä–æ–±–∫–∞ –¥—ñ–π —ñ–∑ –∑–∞—è–≤–∫–∞–º–∏**
@router.callback_query(RequestActionCallback.filter())
async def handle_request_action(callback: CallbackQuery,
                                callback_data: RequestActionCallback):
    request_ref = db.collection("requests").document(callback_data.rid)

    if callback_data.a == "done":
        request_ref.update({"status": "done"})
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
    elif callback_data.a == "del":
        request_ref.delete()
        await callback.answer("üóë –ó–∞—è–≤–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")

    await show_requests(
        callback,
        RequestStatusCallback(site=callback_data.s,
                              request_type=callback_data.t,
                              status="new"))


# üìå **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∞–π—Ç–∞**
@router.callback_query(SiteCallback.filter())
async def show_site_options(callback: CallbackQuery,
                            callback_data: SiteCallback):
    site = callback_data.site
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìû –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–≤–æ–Ω–æ–∫",
                                 callback_data=RequestTypeCallback(
                                     site=site, request_type="phone").pack())
        ],
        [
            InlineKeyboardButton(text="üí¨ –ó–∞—è–≤–∫–∏ –∏–∑ —á–∞—Ç–∞",
                                 callback_data=RequestTypeCallback(
                                     site=site, request_type="chat").pack())
        ], [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="menu")]
    ])
    await callback.message.edit_text(f"üìå <b>{site}</b>\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–æ–∫:",
                                     reply_markup=markup)


# üìå **–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞**
async def main():
    print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__"
